provider "aws" {
    region = "eu-west-2"
    access_key = "EI3LIP"
    secret_key = "kwcAUd8RTVBegUa/p5"    
}

/* resource "aws_instance" "Amol-EC2-Terraform" {
    ami = "ami-0648ea225c13e0729"
    instance_type = "t2.micro"

    tags = {
        Name = "Amol-EC2-Terraform"
    }
} */


/* resource "aws_vpc" "terra_vpc" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "Amol-VPC"
  }
}

resource "aws_subnet" "terra_subnet_private" {
  vpc_id     = aws_vpc.terra_vpc.id
  cidr_block = "10.0.1.0/24"

  tags = {
    Name = "Amol-subnet-private"
  }
} */




# project 1

# 1 Create a VPC
resource "aws_vpc" "terra_vpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name= "Amol-VPC"
  }
}

# 2 Create an internet gateway
resource "aws_internet_gateway" "terra_igw" {
  vpc_id = aws_vpc.terra_vpc.id

  tags = {
    Name = "Amol-IGW"
  }
}

# 3 Create custom route table
resource "aws_route_table" "terra_route_table_public" {
  vpc_id = aws_vpc.terra_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.terra_igw.id
  }

  route {
    ipv6_cidr_block        = "::/0"
    gateway_id = aws_internet_gateway.terra_igw.id
  }

  tags = {
    Name = "Amol-subnet-route-table-public"
  }
}


# 4 Create a subnet
resource "aws_subnet" "terra_subnet_public" {
  vpc_id     = aws_vpc.terra_vpc.id
  cidr_block = "10.0.1.0/24"
  availability_zone = "eu-west-2a"

  tags = {
    Name = "Main"
  }
}


# 5 Associate subnet with route table
resource "aws_route_table_association" "terra_public_subnet_rt_asso" {
  subnet_id      = aws_subnet.terra_subnet_public.id
  route_table_id = aws_route_table.terra_route_table_public.id
}


# 6 Create a security group
resource "aws_security_group" "terra_sg" {
  name        = "Amol-SG"
  description = "Allow TLS inbound traffic"
  vpc_id      = aws_vpc.terra_vpc.id

  ingress {
    description      = "Open HTTPS"
    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {
    description      = "Open HTTP"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }  

  ingress {
    description      = "Open SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "Amol-SG"
  }
}


# 7 Create a N/W interface with an IP in the subnet that was created in the step 4 (i.e. create a private IP for EC2)
resource "aws_network_interface" "terra_network_interface" {
  subnet_id       = aws_subnet.terra_subnet_public.id
  private_ips     = ["10.0.1.50"] 
  security_groups = [aws_security_group.terra_sg.id]
}

# 8 Assign an Elastic IP to the NIC created in step 7

resource "aws_eip" "one" {
  vpc                       = true
  network_interface         = aws_network_interface.terra_network_interface.id
  associate_with_private_ip = "10.0.1.50"
  depends_on = [aws_internet_gateway.terra_igw]
}


# 9 Create a EC2 and install apache web server
resource "aws_instance" "Amol-EC2-app-server" {
  ami           = "ami-0648ea225c13e0729"
  instance_type = "t2.micro"
  availability_zone = "eu-west-2a"
  key_name = "Key30Oct"

  network_interface {
    device_index = 0
    network_interface_id = aws_network_interface.terra_network_interface.id
  }

  user_data = <<-EOF
                #!/bin/bash
                sudo yum update -y
                sudo yum install httpd -y
                sudo bash -c 'echo My Web Page > /var/www/html/index.html'
                sudo systemctl enable httpd
                sudo systemctl start httpd
                EOF

  tags = {
    Name = "Amol-EC2-app-server"
  }
}


output "terra_ec2_public_ip" {
  value = aws_instance.Amol-EC2-app-server.public_ip
}

output "terra_ec2_id" {
  value = aws_instance.Amol-EC2-app-server.id
}


# terraform init
# terraform plan
# terraform apply
# terraform apply --auto-approve
# terraform apply -target aws_instance.Amol-EC2-app-server 
# terraform refresh
# terraform destroy
# terraform destroy -target aws_instance.Amol-EC2-app-server
# id is a property that every resource in terraform has
# terraform state list
# terraform state show aws_instance.Amol-EC2-app-server
